import asyncio
import os
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from dotenv import load_dotenv

from yandex_parser import YandexParser  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à –ø–∞—Ä—Å–µ—Ä

load_dotenv()

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_sessions = {}


@dp.message(Command("start"))
async def start_handler(message: Message):
    user_id = message.from_user.id
    user_sessions[user_id] = {"state": "waiting_query"}

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞ —Å–≤—è–∑–∏ –ù–∏–∫–∏—Ç–∞, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –≤—ã–±–æ—Ä–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–≤–æ–Ω–∫–æ–≤ —Å –∫–æ–º–ø–∞–Ω–∏–µ–π Hot Clients.\n\n"
        "–ü—Ä–∏—à–ª–∏ –º–Ω–µ 1 —Å–ª–æ–≤–æ –∏–ª–∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ç–≤–æ–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –∏—â—É—Ç —Ç–µ–±—è –≤ –Ø–Ω–¥–µ–∫—Å–µ üëá"
    )


def format_revenue(revenue_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã—Ä—É—á–∫–µ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    if not revenue_data:
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã—Ä—É—á–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

    result = []
    for inn, revenue in revenue_data.items():
        result.append(f"- –ò–ù–ù {inn}: {revenue}")
    return "\n".join(result)


@dp.message()
async def any_message_handler(message: Message):
    user_id = message.from_user.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ –∫–æ–º–∞–Ω–¥–æ–π /start
    if user_id not in user_sessions:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥, –Ω–æ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å
    if user_sessions[user_id]["state"] == "waiting_query":
        query = message.text.strip()
        if not query:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å")
            return

        # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_sessions[user_id]["state"] = "processing"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await message.answer(f"üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã...")

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
            with YandexParser() as parser:
                links = parser.get_search_results(query)

                if not links:
                    await message.answer("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòï")
                    return

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                await message.answer(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(links)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':")

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–∞–π—Ç
                for i, url in enumerate(links[:10], 1):
                    try:
                        contacts = parser.extract_contacts(url)

                        if contacts['skipped']:
                            continue

                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        site_info = f"\n{i}. <b>{url}</b>\n"

                        # –¢–µ–ª–µ—Ñ–æ–Ω—ã
                        if contacts['phones']:
                            site_info += "\nüìû <b>–¢–µ–ª–µ—Ñ–æ–Ω—ã:</b>\n" + "\n".join(
                                f"- {p}" for p in contacts['phones']) + "\n"
                        else:
                            site_info += "\n–¢–µ–ª–µ—Ñ–æ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"

                        # –ò–ù–ù
                        if contacts['inns']:
                            site_info += "\nüî¢ <b>–ò–ù–ù:</b>\n" + "\n".join(f"- {inn}" for inn in contacts['inns']) + "\n"

                            # –í—ã—Ä—É—á–∫–∞
                            if contacts['revenues']:
                                site_info += "\nüí∞ <b>–í—ã—Ä—É—á–∫–∞:</b>\n" + format_revenue(contacts['revenues']) + "\n"
                        else:
                            site_info += "\n–ò–ù–ù –Ω–∞ —ç—Ç–æ–º —Å–∞–π—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await message.answer(site_info, parse_mode="HTML")

                        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                        await asyncio.sleep(1)

                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {url}: {str(e)}")
                        continue

                # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message.answer(
                    "–ë—ã–ª —Ä–∞–¥ –ø–æ–º–æ—á—å!\n\n"
                    "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–æ–±—Ä–∞—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –ø–æ –¥—Ä—É–≥–æ–º—É –∑–∞–ø—Ä–æ—Å—É –ø—Ä–∏—à–ª–∏ –º–Ω–µ 1 —Å–ª–æ–≤–æ –∏–ª–∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ "
                    "–ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ç–≤–æ–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –∏—â—É—Ç —Ç–µ–±—è –≤ –Ø–Ω–¥–µ–∫—Å–µ üëá"
                )

        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")

        finally:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=processing_msg.message_id)
            except:
                pass

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            user_sessions[user_id] = {"state": "waiting_query"}


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())