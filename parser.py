import asyncio
import os
import re
from typing import List, Dict, Set, Optional
from collections import defaultdict
import pandas as pd
from io import BytesIO
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, BufferedInputFile
from aiogram.enums import ParseMode
from dotenv import load_dotenv

from yandex_parser import SiteParser

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


class Config:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"""
    BOT_TOKEN: str = os.getenv("BOT_TOKEN", "")
    ADMIN_IDS: Set[int] = set(map(int, os.getenv("ADMIN_IDS", "").split(",")))
    ALLOWED_USER_IDS: Set[int] = set(map(int, os.getenv("ALLOWED_USER_IDS", "").split(",")))
    MAX_CONCURRENT_REQUESTS: int = 3
    MAX_URLS_PER_REQUEST: int = 10
    BLACKLISTED_DOMAINS: Set[str] = {"example.com", "test.com"}


class Emojis:
    """–í—Å–µ emoji –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    START = "üëã"
    ERROR = "‚ùå"
    SUCCESS = "‚úÖ"
    WARNING = "‚ö†Ô∏è"
    SEARCH = "üîç"
    PHONE = "üìû"
    INN = "üî¢"
    MONEY = "üí∞"
    DOC = "üìä"
    TIME = "‚è≥"
    CHECK = "‚úîÔ∏è"
    CANCEL = "‚úñÔ∏è"
    ROCKET = "üöÄ"
    CHART = "üìà"
    TADA = "üéâ"
    THINKING = "ü§î"
    WAIT = "‚è±Ô∏è"
    QUEUE = "üìã"
    LOCK = "üîí"
    USER_ADD = "üë§‚ûï"
    USER_REMOVE = "üë§‚ûñ"
    LIST = "üìú"
    INFO = "‚ÑπÔ∏è"


class UserManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞"""

    @staticmethod
    async def is_admin(user_id: int) -> bool:
        return user_id in Config.ADMIN_IDS

    @staticmethod
    async def is_allowed(user_id: int) -> bool:
        return user_id in Config.ALLOWED_USER_IDS or await UserManager.is_admin(user_id)

    @staticmethod
    async def add_user(user_id: int) -> bool:
        if user_id not in Config.ALLOWED_USER_IDS:
            Config.ALLOWED_USER_IDS.add(user_id)
            return True
        return False

    @staticmethod
    async def remove_user(user_id: int) -> bool:
        if user_id in Config.ALLOWED_USER_IDS and user_id not in Config.ADMIN_IDS:
            Config.ALLOWED_USER_IDS.remove(user_id)
            return True
        return False

    @staticmethod
    async def get_users_list() -> str:
        users = "\n".join(f"‚Ä¢ {uid}" for uid in Config.ALLOWED_USER_IDS)
        admins = "\n".join(f"‚Ä¢ {uid} (admin)" for uid in Config.ADMIN_IDS)
        return f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n{admins}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{users}"


class ParserTools:
    """–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    URL_PATTERN = re.compile(
        r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
    )

    @classmethod
    def extract_urls(cls, text: str) -> List[str]:
        return cls.URL_PATTERN.findall(text)

    @staticmethod
    async def format_revenue(revenue_data: Dict[str, str]) -> str:
        if not revenue_data:
            return f"{Emojis.WARNING} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã—Ä—É—á–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        return "\n".join(f"‚ûñ –ò–ù–ù {inn}: {revenue}" for inn, revenue in revenue_data.items())

    @staticmethod
    async def create_excel_report(data: List[Dict]) -> BufferedInputFile:
        rows = []
        for item in data:
            for phone in item['phones']:
                for inn in item['inns']:
                    rows.append({
                        'URL': item['url'],
                        '–¢–µ–ª–µ—Ñ–æ–Ω': phone,
                        '–ò–ù–ù': inn,
                        '–í—ã—Ä—É—á–∫–∞': item['revenues'].get(inn, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'),
                        '–°—Ç–∞—Ç—É—Å': '–ü—Ä–æ–ø—É—â–µ–Ω' if item['skipped'] else '–û–±—Ä–∞–±–æ—Ç–∞–Ω'
                    })

            if item['phones'] and not item['inns']:
                for phone in item['phones']:
                    rows.append({
                        'URL': item['url'],
                        '–¢–µ–ª–µ—Ñ–æ–Ω': phone,
                        '–ò–ù–ù': '–ù–µ –Ω–∞–π–¥–µ–Ω',
                        '–í—ã—Ä—É—á–∫–∞': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                        '–°—Ç–∞—Ç—É—Å': '–ü—Ä–æ–ø—É—â–µ–Ω' if item['skipped'] else '–û–±—Ä–∞–±–æ—Ç–∞–Ω'
                    })

            if item['inns'] and not item['phones']:
                for inn in item['inns']:
                    rows.append({
                        'URL': item['url'],
                        '–¢–µ–ª–µ—Ñ–æ–Ω': '–ù–µ –Ω–∞–π–¥–µ–Ω',
                        '–ò–ù–ù': inn,
                        '–í—ã—Ä—É—á–∫–∞': item['revenues'].get(inn, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'),
                        '–°—Ç–∞—Ç—É—Å': '–ü—Ä–æ–ø—É—â–µ–Ω' if item['skipped'] else '–û–±—Ä–∞–±–æ—Ç–∞–Ω'
                    })

        df = pd.DataFrame(rows)
        output = BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            df.to_excel(writer, index=False)
            worksheet = writer.sheets['Sheet1']
            worksheet.set_column('A:A', 40)
            worksheet.set_column('B:B', 20)
            worksheet.set_column('C:C', 15)
            worksheet.set_column('D:D', 30)
            worksheet.set_column('E:E', 12)
            worksheet.autofilter(0, 0, 0, 4)

        return BufferedInputFile(output.getvalue(), filename="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã_–∞–Ω–∞–ª–∏–∑–∞.xlsx")


class CompetitorAnalyzerBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤"""

    def __init__(self):
        self.bot = Bot(token=Config.BOT_TOKEN)
        self.dp = Dispatcher()
        self.user_sessions = {}
        self.active_requests = defaultdict(int)
        self.request_semaphore = asyncio.Semaphore(Config.MAX_CONCURRENT_REQUESTS)

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._register_handlers()

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.dp.message.register(self._start_handler, Command("start"))
        self.dp.message.register(self._help_handler, Command("help"))
        self.dp.message.register(self._add_user_handler, Command("add_user"))
        self.dp.message.register(self._remove_user_handler, Command("remove_user"))
        self.dp.message.register(self._list_users_handler, Command("list_users"))
        self.dp.message.register(self._main_handler)

    async def _send_message(self, chat_id: int, text: str, **kwargs):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await self.bot.send_message(chat_id, text, parse_mode=ParseMode.HTML, **kwargs)

    async def _process_urls(self, message: Message, urls: List[str]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ URL"""
        processing_msg = await message.answer(
            f"{Emojis.TIME} <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {len(urls)} —Å–∞–π—Ç–æ–≤...</b>\n"
            f"{Emojis.SEARCH} –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã...",
            parse_mode=ParseMode.HTML
        )

        all_results = []
        try:
            with SiteParser() as parser:
                for i, url in enumerate(urls, 1):
                    try:
                        domain = re.search(r'https?://([^/]+)', url).group(1)
                        if domain in Config.BLACKLISTED_DOMAINS:
                            await message.answer(
                                f"{Emojis.CANCEL} <b>–°–∞–π—Ç –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ:</b> {url}",
                                parse_mode=ParseMode.HTML
                            )
                            continue

                        contacts = parser.extract_contacts(url)
                        all_results.append(contacts)

                        if contacts['skipped']:
                            await message.answer(
                                f"{Emojis.CANCEL} <b>–°–∞–π—Ç –ø—Ä–æ–ø—É—â–µ–Ω:</b> {url}\n"
                                "<i>–ü—Ä–∏—á–∏–Ω–∞:</i> –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ",
                                parse_mode=ParseMode.HTML
                            )
                            continue

                        site_report = [
                            f"\n{Emojis.CHECK} <b>–°–∞–π—Ç #{i}:</b> <code>{url}</code>",
                            f"\n{Emojis.PHONE} <b>–¢–µ–ª–µ—Ñ–æ–Ω—ã:</b>\n" + "\n".join(f"‚ûñ {p}" for p in contacts['phones']) if
                            contacts['phones'] else f"\n{Emojis.WARNING} –¢–µ–ª–µ—Ñ–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                            f"\n{Emojis.INN} <b>–ò–ù–ù:</b>\n" + "\n".join(f"‚ûñ {inn}" for inn in contacts['inns']) if
                            contacts['inns'] else f"\n{Emojis.WARNING} –ò–ù–ù –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                            f"\n{Emojis.MONEY} <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n" +
                            await ParserTools.format_revenue(contacts['revenues']) if
                            contacts['revenues'] else ""
                        ]

                        await message.answer("\n".join(site_report), parse_mode=ParseMode.HTML)
                        await asyncio.sleep(1)

                    except Exception as e:
                        await message.answer(
                            f"{Emojis.ERROR} <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:</b> {url}\n"
                            f"<i>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:</i> {str(e)}",
                            parse_mode=ParseMode.HTML
                        )
                        continue

                if all_results:
                    excel_file = await ParserTools.create_excel_report(all_results)
                    await message.answer_document(
                        excel_file,
                        caption=f"{Emojis.DOC} <b>–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!</b> {Emojis.TADA}",
                        parse_mode=ParseMode.HTML
                    )

        except Exception as e:
            await message.answer(
                f"{Emojis.ERROR} <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:</b>\n"
                f"<code>{str(e)}</code>",
                parse_mode=ParseMode.HTML
            )
        finally:
            try:
                await self.bot.delete_message(
                    chat_id=message.chat.id,
                    message_id=processing_msg.message_id
                )
            except:
                pass

    async def _start_handler(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        if not await UserManager.is_allowed(message.from_user.id):
            await message.answer(
                f"{Emojis.LOCK} <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!</b>\n"
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.",
                parse_mode=ParseMode.HTML
            )
            return

        self.user_sessions[message.from_user.id] = {"state": "waiting_urls"}

        welcome_msg = f"""
{Emojis.START} <b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!</b> {Emojis.START}

–Ø ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –æ—Ç <b>Hot Clients</b> {Emojis.ROCKET}

{Emojis.THINKING} <i>–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</i>
‚Ä¢ –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ {Emojis.PHONE}
‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ò–ù–ù –∫–æ–º–ø–∞–Ω–∏–π {Emojis.INN}
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π {Emojis.CHART}

{Emojis.SUCCESS} <b>–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–π—Ç—ã</b> (–¥–æ {Config.MAX_URLS_PER_REQUEST} –∑–∞ —Ä–∞–∑)

{Emojis.INFO} –î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help
"""
        await message.answer(welcome_msg, parse_mode=ParseMode.HTML)

    async def _help_handler(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = f"""
{Emojis.INFO} <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b> {Emojis.INFO}

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

<b>–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>
/add_user [id] - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/remove_user [id] - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/list_users - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
1. –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–π—Ç—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
2. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
3. –°–∫–∞—á–∞–π—Ç–µ –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –≤ Excel
"""
        await message.answer(help_text, parse_mode=ParseMode.HTML)

    async def _add_user_handler(self, message: Message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ"""
        if not await UserManager.is_admin(message.from_user.id):
            await message.answer(
                f"{Emojis.ERROR} <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!</b>\n"
                "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.",
                parse_mode=ParseMode.HTML
            )
            return

        try:
            user_id = int(message.text.split()[1])
            if await UserManager.add_user(user_id):
                await message.answer(
                    f"{Emojis.USER_ADD} <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω!</b>",
                    parse_mode=ParseMode.HTML
                )
            else:
                await message.answer(
                    f"{Emojis.WARNING} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ",
                    parse_mode=ParseMode.HTML
                )
        except (IndexError, ValueError):
            await message.answer(
                f"{Emojis.ERROR} <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> /add_user [user_id]",
                parse_mode=ParseMode.HTML
            )

    async def _remove_user_handler(self, message: Message):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö"""
        if not await UserManager.is_admin(message.from_user.id):
            await message.answer(
                f"{Emojis.ERROR} <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!</b>\n"
                "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.",
                parse_mode=ParseMode.HTML
            )
            return

        try:
            user_id = int(message.text.split()[1])

            if user_id in Config.ADMIN_IDS:
                await message.answer(
                    f"{Emojis.ERROR} <b>–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!</b>",
                    parse_mode=ParseMode.HTML
                )
                return

            if await UserManager.remove_user(user_id):
                await message.answer(
                    f"{Emojis.USER_REMOVE} <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω!</b>",
                    parse_mode=ParseMode.HTML
                )
            else:
                await message.answer(
                    f"{Emojis.WARNING} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö",
                    parse_mode=ParseMode.HTML
                )
        except (IndexError, ValueError):
            await message.answer(
                f"{Emojis.ERROR} <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> /remove_user [user_id]",
                parse_mode=ParseMode.HTML
            )

    async def _list_users_handler(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if not await UserManager.is_admin(message.from_user.id):
            await message.answer(
                f"{Emojis.ERROR} <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!</b>\n"
                "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.",
                parse_mode=ParseMode.HTML
            )
            return

        users_list = await UserManager.get_users_list()
        await message.answer(
            f"{Emojis.LIST} <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n{users_list}",
            parse_mode=ParseMode.HTML
        )

    async def _main_handler(self, message: Message):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not await UserManager.is_allowed(message.from_user.id):
            return

        user_id = message.from_user.id

        if user_id not in self.user_sessions:
            await message.answer(f"{Emojis.WARNING} –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
            return

        if self.active_requests[user_id] >= Config.MAX_CONCURRENT_REQUESTS:
            await message.answer(
                f"{Emojis.WAIT} <b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤!</b>\n\n"
                f"–£ –º–µ–Ω—è —Å–µ–π—á–∞—Å {Config.MAX_CONCURRENT_REQUESTS} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
                parse_mode=ParseMode.HTML
            )
            return

        urls = ParserTools.extract_urls(message.text)
        if not urls:
            await message.answer(f"{Emojis.ERROR} –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏!")
            return

        if len(urls) > Config.MAX_URLS_PER_REQUEST:
            await message.answer(
                f"{Emojis.WARNING} –ü—Ä–∏–Ω—è—Ç–æ –ø–µ—Ä–≤—ã—Ö {Config.MAX_URLS_PER_REQUEST} –∏–∑ {len(urls)} —Å—Å—ã–ª–æ–∫")
            urls = urls[:Config.MAX_URLS_PER_REQUEST]

        self.active_requests[user_id] += 1

        try:
            async with self.request_semaphore:
                await self._process_urls(message, urls)
        finally:
            self.active_requests[user_id] = max(0, self.active_requests[user_id] - 1)
            if self.active_requests[user_id] == 0:
                del self.active_requests[user_id]

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        await self.dp.start_polling(self.bot)


if __name__ == "__main__":
    bot = CompetitorAnalyzerBot()
    asyncio.run(bot.run())