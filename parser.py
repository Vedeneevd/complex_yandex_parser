import asyncio
import os
import re
from typing import List, Dict
from collections import defaultdict
import pandas as pd
from io import BytesIO
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, BufferedInputFile
from dotenv import load_dotenv
from yandex_parser import SiteParser

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
MAX_CONCURRENT_REQUESTS = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
MAX_URLS_PER_REQUEST = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ URL –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
user_sessions = {}
active_requests = defaultdict(int)  # –°—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
request_semaphore = asyncio.Semaphore(MAX_CONCURRENT_REQUESTS)  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ–º–∞—Ñ–æ—Ä

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ URL
URL_PATTERN = re.compile(
    r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
)

# –°–º–∞–π–ª–∏–∫–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
EMOJIS = {
    "start": "üëã",
    "error": "‚ùå",
    "success": "‚úÖ",
    "warning": "‚ö†Ô∏è",
    "search": "üîç",
    "phone": "üìû",
    "inn": "üî¢",
    "money": "üí∞",
    "doc": "üìä",
    "time": "‚è≥",
    "check": "‚úîÔ∏è",
    "cancel": "‚úñÔ∏è",
    "rocket": "üöÄ",
    "chart": "üìà",
    "tada": "üéâ",
    "thinking": "ü§î",
    "wait": "‚è±Ô∏è",
    "queue": "üìã"
}


def format_revenue(revenue_data: Dict[str, str]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã—Ä—É—á–∫–µ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    if not revenue_data:
        return f"{EMOJIS['warning']} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã—Ä—É—á–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

    return "\n".join(f"‚ûñ –ò–ù–ù {inn}: {revenue}" for inn, revenue in revenue_data.items())


def extract_urls(text: str) -> List[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    return URL_PATTERN.findall(text)


async def create_excel_report(data: List[Dict]) -> BufferedInputFile:
    """–°–æ–∑–¥–∞–µ—Ç Excel-—Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    rows = []
    for item in data:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏ –ò–ù–ù
        for phone in item['phones']:
            for inn in item['inns']:
                rows.append({
                    'URL': item['url'],
                    '–¢–µ–ª–µ—Ñ–æ–Ω': phone,
                    '–ò–ù–ù': inn,
                    '–í—ã—Ä—É—á–∫–∞': item['revenues'].get(inn, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'),
                    '–°—Ç–∞—Ç—É—Å': '–ü—Ä–æ–ø—É—â–µ–Ω' if item['skipped'] else '–û–±—Ä–∞–±–æ—Ç–∞–Ω'
                })

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–ª–µ—Ñ–æ–Ω—ã –∏–ª–∏ —Ç–æ–ª—å–∫–æ –ò–ù–ù
        if item['phones'] and not item['inns']:
            for phone in item['phones']:
                rows.append({
                    'URL': item['url'],
                    '–¢–µ–ª–µ—Ñ–æ–Ω': phone,
                    '–ò–ù–ù': '–ù–µ –Ω–∞–π–¥–µ–Ω',
                    '–í—ã—Ä—É—á–∫–∞': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                    '–°—Ç–∞—Ç—É—Å': '–ü—Ä–æ–ø—É—â–µ–Ω' if item['skipped'] else '–û–±—Ä–∞–±–æ—Ç–∞–Ω'
                })

        if item['inns'] and not item['phones']:
            for inn in item['inns']:
                rows.append({
                    'URL': item['url'],
                    '–¢–µ–ª–µ—Ñ–æ–Ω': '–ù–µ –Ω–∞–π–¥–µ–Ω',
                    '–ò–ù–ù': inn,
                    '–í—ã—Ä—É—á–∫–∞': item['revenues'].get(inn, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'),
                    '–°—Ç–∞—Ç—É—Å': '–ü—Ä–æ–ø—É—â–µ–Ω' if item['skipped'] else '–û–±—Ä–∞–±–æ—Ç–∞–Ω'
                })

    # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –∏ Excel-—Ñ–∞–π–ª–∞
    df = pd.DataFrame(rows)
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False)
        worksheet = writer.sheets['Sheet1']
        worksheet.set_column('A:A', 40)
        worksheet.set_column('B:B', 20)
        worksheet.set_column('C:C', 15)
        worksheet.set_column('D:D', 30)
        worksheet.set_column('E:E', 12)
        worksheet.autofilter(0, 0, 0, 4)

    return BufferedInputFile(output.getvalue(), filename="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã_–∞–Ω–∞–ª–∏–∑–∞.xlsx")


@dp.message(Command("start"))
async def start_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_sessions[message.from_user.id] = {"state": "waiting_urls"}

    welcome_msg = f"""
{EMOJIS['start']} <b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!</b> {EMOJIS['start']}

–Ø ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –æ—Ç <b>Hot Clients</b> {EMOJIS['rocket']}

{EMOJIS['thinking']} <i>–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</i>
‚Ä¢ –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ {EMOJIS['phone']}
‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ò–ù–ù –∫–æ–º–ø–∞–Ω–∏–π {EMOJIS['inn']}
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π {EMOJIS['chart']}

{EMOJIS['success']} <b>–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–π—Ç—ã</b> (–¥–æ {MAX_URLS_PER_REQUEST} –∑–∞ —Ä–∞–∑)
"""
    await message.answer(welcome_msg, parse_mode="HTML")


async def process_urls(message: Message, urls: List[str]):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL"""
    processing_msg = await message.answer(
        f"{EMOJIS['time']} <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {len(urls)} —Å–∞–π—Ç–æ–≤...</b>\n"
        f"{EMOJIS['search']} –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã...",
        parse_mode="HTML"
    )

    all_results = []
    try:
        with SiteParser() as parser:
            for i, url in enumerate(urls, 1):
                try:
                    contacts = parser.extract_contacts(url)
                    all_results.append(contacts)

                    if contacts['skipped']:
                        await message.answer(
                            f"{EMOJIS['cancel']} <b>–°–∞–π—Ç –ø—Ä–æ–ø—É—â–µ–Ω:</b> {url}\n"
                            "<i>–ü—Ä–∏—á–∏–Ω–∞:</i> –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ",
                            parse_mode="HTML"
                        )
                        continue

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ —Å–∞–π—Ç—É
                    site_report = [
                        f"\n{EMOJIS['check']} <b>–°–∞–π—Ç #{i}:</b> <code>{url}</code>",
                        f"\n{EMOJIS['phone']} <b>–¢–µ–ª–µ—Ñ–æ–Ω—ã:</b>\n" + "\n".join(f"‚ûñ {p}" for p in contacts['phones']) if
                        contacts['phones'] else f"\n{EMOJIS['warning']} –¢–µ–ª–µ—Ñ–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                        f"\n{EMOJIS['inn']} <b>–ò–ù–ù:</b>\n" + "\n".join(f"‚ûñ {inn}" for inn in contacts['inns']) if
                        contacts['inns'] else f"\n{EMOJIS['warning']} –ò–ù–ù –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                        f"\n{EMOJIS['money']} <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n" + format_revenue(contacts['revenues']) if
                        contacts['revenues'] else ""
                    ]

                    await message.answer("\n".join(site_report), parse_mode="HTML")
                    await asyncio.sleep(1)

                except Exception as e:
                    await message.answer(
                        f"{EMOJIS['error']} <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:</b> {url}\n"
                        f"<i>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:</i> {str(e)}",
                        parse_mode="HTML"
                    )
                    continue

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            if all_results:
                excel_file = await create_excel_report(all_results)
                await message.answer_document(
                    excel_file,
                    caption=f"{EMOJIS['doc']} <b>–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!</b>",
                    parse_mode="HTML"
                )

    except Exception as e:
        await message.answer(
            f"{EMOJIS['error']} <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:</b>\n"
            f"<code>{str(e)}</code>",
            parse_mode="HTML"
        )
    finally:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=processing_msg.message_id)
        except:
            pass


@dp.message()
async def message_handler(message: Message):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞
    if user_id not in user_sessions:
        await message.answer(f"{EMOJIS['warning']} –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
    if active_requests[user_id] >= MAX_CONCURRENT_REQUESTS:
        await message.answer(
            f"{EMOJIS['wait']} <b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤!</b>\n\n"
            f"–£ –º–µ–Ω—è —Å–µ–π—á–∞—Å {MAX_CONCURRENT_REQUESTS} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
            parse_mode="HTML"
        )
        return

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ URL
    urls = extract_urls(message.text)
    if not urls:
        await message.answer(f"{EMOJIS['error']} –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏!")
        return

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ URL
    if len(urls) > MAX_URLS_PER_REQUEST:
        await message.answer(
            f"{EMOJIS['warning']} –ü—Ä–∏–Ω—è—Ç–æ –ø–µ—Ä–≤—ã—Ö {MAX_URLS_PER_REQUEST} –∏–∑ {len(urls)} —Å—Å—ã–ª–æ–∫")
        urls = urls[:MAX_URLS_PER_REQUEST]

    # –£—á–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    active_requests[user_id] += 1

    try:
        async with request_semaphore:
            await process_urls(message, urls)
    finally:
        active_requests[user_id] = max(0, active_requests[user_id] - 1)
        if active_requests[user_id] == 0:
            del active_requests[user_id]


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())