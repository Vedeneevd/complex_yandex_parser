import asyncio
import os
import re
from typing import List

from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from dotenv import load_dotenv

from yandex_parser import SiteParser  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –ø–∞—Ä—Å–µ—Ä

load_dotenv()

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_sessions = {}

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ URL
URL_PATTERN = re.compile(
    r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
)


def format_revenue(revenue_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã—Ä—É—á–∫–µ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    if not revenue_data:
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã—Ä—É—á–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

    result = []
    for inn, revenue in revenue_data.items():
        result.append(f"- –ò–ù–ù {inn}: {revenue}")
    return "\n".join(result)


def extract_urls(text: str) -> List[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    return URL_PATTERN.findall(text)


@dp.message(Command("start"))
async def start_handler(message: Message):
    user_id = message.from_user.id
    user_sessions[user_id] = {"state": "waiting_urls"}

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞ —Å–≤—è–∑–∏ –ù–∏–∫–∏—Ç–∞, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–≤–æ–Ω–∫–æ–≤ —Å –∫–æ–º–ø–∞–Ω–∏–µ–π Hot Clients.\n\n"
        "–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–π—Ç—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ (–æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ), –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
    )


@dp.message()
async def any_message_handler(message: Message):
    user_id = message.from_user.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ –∫–æ–º–∞–Ω–¥–æ–π /start
    if user_id not in user_sessions:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    urls = extract_urls(message.text)
    if not urls:
        await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer(f"üîç –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ {len(urls)} —Å–∞–π—Ç–æ–≤... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã...")

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
        with SiteParser() as parser:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–∞–π—Ç
            for i, url in enumerate(urls[:10], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Å–∞–π—Ç–∞–º–∏ –∑–∞ —Ä–∞–∑
                try:
                    contacts = parser.extract_contacts(url)

                    if contacts['skipped']:
                        await message.answer(f"–°–∞–π—Ç {url} –ø—Ä–æ–ø—É—â–µ–Ω (–≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ)")
                        continue

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    site_info = f"\n{i}. <b>{url}</b>\n"

                    # –¢–µ–ª–µ—Ñ–æ–Ω—ã
                    if contacts['phones']:
                        site_info += "\nüìû <b>–¢–µ–ª–µ—Ñ–æ–Ω—ã:</b>\n" + "\n".join(
                            f"- {p}" for p in contacts['phones']) + "\n"
                    else:
                        site_info += "\n–¢–µ–ª–µ—Ñ–æ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"

                    # –ò–ù–ù
                    if contacts['inns']:
                        site_info += "\nüî¢ <b>–ò–ù–ù:</b>\n" + "\n".join(f"- {inn}" for inn in contacts['inns']) + "\n"

                        # –í—ã—Ä—É—á–∫–∞
                        if contacts['revenues']:
                            site_info += "\nüí∞ <b>–í—ã—Ä—É—á–∫–∞:</b>\n" + format_revenue(contacts['revenues']) + "\n"
                    else:
                        site_info += "\n–ò–ù–ù –Ω–∞ —ç—Ç–æ–º —Å–∞–π—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await message.answer(site_info, parse_mode="HTML")

                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    await asyncio.sleep(1)

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {url}: {str(e)}")
                    await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∞–π—Ç–∞ {url}")
                    continue

            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(
                "–ë—ã–ª —Ä–∞–¥ –ø–æ–º–æ—á—å!\n\n"
                "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å–∞–π—Ç—ã, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∏—Ö."
            )

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")

    finally:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=processing_msg.message_id)
        except:
            pass


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())