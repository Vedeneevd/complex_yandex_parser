import asyncio
import os
import re
from typing import List
import pandas as pd
from io import BytesIO

from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, BufferedInputFile
from dotenv import load_dotenv

from yandex_parser import SiteParser  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –ø–∞—Ä—Å–µ—Ä

load_dotenv()

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_sessions = {}

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ URL
URL_PATTERN = re.compile(
    r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
)


def format_revenue(revenue_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã—Ä—É—á–∫–µ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    if not revenue_data:
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã—Ä—É—á–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

    result = []
    for inn, revenue in revenue_data.items():
        result.append(f"- –ò–ù–ù {inn}: {revenue}")
    return "\n".join(result)


def extract_urls(text: str) -> List[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    return URL_PATTERN.findall(text)


def create_excel_report(data: list) -> bytes:
    """–°–æ–∑–¥–∞–µ—Ç Excel-—Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç bytes"""
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è DataFrame
    rows = []
    for item in data:
        for phone in item['phones']:
            for inn in item['inns']:
                rows.append({
                    'URL': item['url'],
                    '–¢–µ–ª–µ—Ñ–æ–Ω': phone,
                    '–ò–ù–ù': inn,
                    '–í—ã—Ä—É—á–∫–∞': item['revenues'].get(inn, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'),
                    '–°—Ç–∞—Ç—É—Å': '–ü—Ä–æ–ø—É—â–µ–Ω' if item['skipped'] else '–û–±—Ä–∞–±–æ—Ç–∞–Ω'
                })

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω—ã, –Ω–æ –Ω–µ—Ç –ò–ù–ù
        if item['phones'] and not item['inns']:
            for phone in item['phones']:
                rows.append({
                    'URL': item['url'],
                    '–¢–µ–ª–µ—Ñ–æ–Ω': phone,
                    '–ò–ù–ù': '–ù–µ –Ω–∞–π–¥–µ–Ω',
                    '–í—ã—Ä—É—á–∫–∞': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                    '–°—Ç–∞—Ç—É—Å': '–ü—Ä–æ–ø—É—â–µ–Ω' if item['skipped'] else '–û–±—Ä–∞–±–æ—Ç–∞–Ω'
                })

        # –ï—Å–ª–∏ –µ—Å—Ç—å –ò–ù–ù, –Ω–æ –Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
        if item['inns'] and not item['phones']:
            for inn in item['inns']:
                rows.append({
                    'URL': item['url'],
                    '–¢–µ–ª–µ—Ñ–æ–Ω': '–ù–µ –Ω–∞–π–¥–µ–Ω',
                    '–ò–ù–ù': inn,
                    '–í—ã—Ä—É—á–∫–∞': item['revenues'].get(inn, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'),
                    '–°—Ç–∞—Ç—É—Å': '–ü—Ä–æ–ø—É—â–µ–Ω' if item['skipped'] else '–û–±—Ä–∞–±–æ—Ç–∞–Ω'
                })

    # –°–æ–∑–¥–∞–µ–º DataFrame
    df = pd.DataFrame(rows, columns=['URL', '–¢–µ–ª–µ—Ñ–æ–Ω', '–ò–ù–ù', '–í—ã—Ä—É—á–∫–∞', '–°—Ç–∞—Ç—É—Å'])

    # –°–æ–∑–¥–∞–µ–º Excel-—Ñ–∞–π–ª –≤ BytesIO
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã')

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç workbook –∏ worksheet –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        workbook = writer.book
        worksheet = writer.sheets['–†–µ–∑—É–ª—å—Ç–∞—Ç—ã']

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
        worksheet.set_column('A:A', 40)  # URL
        worksheet.set_column('B:B', 20)  # –¢–µ–ª–µ—Ñ–æ–Ω
        worksheet.set_column('C:C', 15)  # –ò–ù–ù
        worksheet.set_column('D:D', 30)  # –í—ã—Ä—É—á–∫–∞
        worksheet.set_column('E:E', 12)  # –°—Ç–∞—Ç—É—Å

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        worksheet.autofilter(0, 0, 0, 4)

    return output.getvalue()


@dp.message(Command("start"))
async def start_handler(message: Message):
    user_id = message.from_user.id
    user_sessions[user_id] = {"state": "waiting_urls"}

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞ —Å–≤—è–∑–∏ –ù–∏–∫–∏—Ç–∞, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–≤–æ–Ω–∫–æ–≤ —Å –∫–æ–º–ø–∞–Ω–∏–µ–π Hot Clients.\n\n"
        "–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–π—Ç—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ (–æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ), –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
    )


@dp.message()
async def any_message_handler(message: Message):
    user_id = message.from_user.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ –∫–æ–º–∞–Ω–¥–æ–π /start
    if user_id not in user_sessions:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    urls = extract_urls(message.text)
    if not urls:
        await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer(f"üîç –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ {len(urls)} —Å–∞–π—Ç–æ–≤... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã...")

    all_results = []

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
        with SiteParser() as parser:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–∞–π—Ç
            for i, url in enumerate(urls[:10], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Å–∞–π—Ç–∞–º–∏ –∑–∞ —Ä–∞–∑
                try:
                    contacts = parser.extract_contacts(url)
                    all_results.append(contacts)

                    if contacts['skipped']:
                        await message.answer(f"–°–∞–π—Ç {url} –ø—Ä–æ–ø—É—â–µ–Ω (–≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ)")
                        continue

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    site_info = f"\n{i}. <b>{url}</b>\n"

                    # –¢–µ–ª–µ—Ñ–æ–Ω—ã
                    if contacts['phones']:
                        site_info += "\nüìû <b>–¢–µ–ª–µ—Ñ–æ–Ω—ã:</b>\n" + "\n".join(
                            f"- {p}" for p in contacts['phones']) + "\n"
                    else:
                        site_info += "\n–¢–µ–ª–µ—Ñ–æ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"

                    # –ò–ù–ù
                    if contacts['inns']:
                        site_info += "\nüî¢ <b>–ò–ù–ù:</b>\n" + "\n".join(f"- {inn}" for inn in contacts['inns']) + "\n"

                        # –í—ã—Ä—É—á–∫–∞
                        if contacts['revenues']:
                            site_info += "\nüí∞ <b>–í—ã—Ä—É—á–∫–∞:</b>\n" + format_revenue(contacts['revenues']) + "\n"
                    else:
                        site_info += "\n–ò–ù–ù –Ω–∞ —ç—Ç–æ–º —Å–∞–π—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await message.answer(site_info, parse_mode="HTML")

                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    await asyncio.sleep(1)

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {url}: {str(e)}")
                    await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∞–π—Ç–∞ {url}")
                    continue

            # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel-—Ñ–∞–π–ª
            if all_results:
                excel_data = create_excel_report(all_results)
                excel_file = BufferedInputFile(excel_data, filename="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã_–∞–Ω–∞–ª–∏–∑–∞.xlsx")
                await message.answer_document(
                    excel_file,
                    caption="–í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"
                )

            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(
                "–ë—ã–ª —Ä–∞–¥ –ø–æ–º–æ—á—å!\n\n"
                "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å–∞–π—Ç—ã, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∏—Ö."
            )

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")

    finally:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=processing_msg.message_id)
        except:
            pass


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())