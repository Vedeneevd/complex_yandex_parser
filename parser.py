import asyncio
import os

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from yandex_parser import YandexParser  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à –ø–∞—Ä—Å–µ—Ä



# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_sessions = {}


@dp.message(Command("start"))
async def start_handler(message: Message):
    user_id = message.from_user.id
    user_sessions[user_id] = {"state": "waiting_query"}

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞ —Å–≤—è–∑–∏ –ù–∏–∫–∏—Ç–∞, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –≤—ã–±–æ—Ä–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–≤–æ–Ω–∫–æ–≤ —Å –∫–æ–º–ø–∞–Ω–∏–µ–π Hot Clients.\n\n"
        "–ü—Ä–∏—à–ª–∏ –º–Ω–µ 1 —Å–ª–æ–≤–æ –∏–ª–∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ç–≤–æ–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –∏—â—É—Ç —Ç–µ–±—è –≤ –Ø–Ω–¥–µ–∫—Å–µ üëá"
    )


@dp.message()
async def query_handler(message: Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_sessions or user_sessions[user_id]["state"] != "waiting_query":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return

    query = message.text.strip()
    if not query:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å")
        return

    # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_sessions[user_id]["state"] = "processing"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer(f"üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã...")

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
        parser = YandexParser()
        try:
            links = parser.get_search_results(query)

            if not links:
                await message.answer("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòï")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —á–∞—Å—Ç—è–º (–∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã –≤ Telegram)
            result_text = f"üìä –ù–∞–π–¥–µ–Ω–æ {len(links)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':\n\n"
            part = []
            current_length = 0

            for i, url in enumerate(links[:10], 1):
                phones, inns = parser.extract_contacts(url)

                site_info = f"{i}. {url}\n"
                if phones:
                    site_info += "üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã:\n" + "\n".join(f"- {p}" for p in phones) + "\n"
                else:
                    '–¢–µ–ª–µ—Ñ–æ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
                if inns:
                    site_info += "üî¢ –ò–ù–ù:\n" + "\n".join(f"- {inn}" for inn in inns) + "\n"
                else:
                    '–ò–ù–ù –Ω–∞ —ç—Ç–æ–º —Å–∞–π—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
                site_info += "\n"



                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ ~4000 —Å–∏–º–≤–æ–ª–æ–≤
                if current_length + len(site_info) > 4000:
                    await message.answer("\n".join(part))
                    part = []
                    current_length = 0

                part.append(site_info)
                current_length += len(site_info)

            if part:
                await message.answer("\n".join(part))

            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(
                "–ë—ã–ª —Ä–∞–¥ –ø–æ–º–æ—á—å!\n\n"
                "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–æ–±—Ä–∞—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –ø–æ –¥—Ä—É–≥–æ–º—É –∑–∞–ø—Ä–æ—Å—É –ø—Ä–∏—à–ª–∏ –º–Ω–µ 1 —Å–ª–æ–≤–æ –∏–ª–∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ "
                "–ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ç–≤–æ–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –∏—â—É—Ç —Ç–µ–±—è –≤ –Ø–Ω–¥–µ–∫—Å–µ üëá"
            )

        finally:
            parser.close()

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")

    finally:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=processing_msg.message_id)
        except:
            pass

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_sessions[user_id] = {"state": "waiting_query"}


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())